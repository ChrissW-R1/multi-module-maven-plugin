package me.chrisswr1.multimodulemavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.codehaus.plexus.interpolation.InterpolationException;
import org.codehaus.plexus.interpolation.MapBasedValueSource;
import org.codehaus.plexus.interpolation.StringSearchInterpolator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.lang.reflect.Field;
import java.util.Collection;
import java.util.Map;

public class PropertyProcessor {
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	private final StringSearchInterpolator stringInterpolator;

	public PropertyProcessor(
		final @Nullable Map<? extends String, ? extends String> properties
	) {
		final @NotNull Map<? extends String, ? extends String> propertiesMap =
			properties != null ?
			properties :
			Map.of();

		final @NotNull StringSearchInterpolator stringInterpolator =
			new StringSearchInterpolator();

		stringInterpolator.addValueSource(new MapBasedValueSource(
			propertiesMap
		));

		this.stringInterpolator = stringInterpolator;
	}

	public @Nullable String resolveString(
		final @Nullable String text
	) {
		if (text == null) {
			return null;
		}

		try {
			return this.getStringInterpolator().interpolate(text);
		} catch (final InterpolationException e) {
			return text;
		}
	}

	public <T> void resolveObject(
		final @Nullable T object
	) {
		if (object == null) {
			return;
		}

		Class<?> clazz = object.getClass();
		while (clazz != null && clazz != Object.class) {
			for (Field field : clazz.getDeclaredFields()) {
				field.setAccessible(true);

				try {
					Object value = field.get(object);
					if (value instanceof String) {
						field.set(object, this.resolveString((String)value));
					} else if (value instanceof Collection<?>) {
						for (Object item : (Collection<?>)value) {
							this.resolveObject(item);
						}
					} else if (value instanceof Map<?, ?>) {
						for (
							Map.Entry<?, ?> entry :
							((Map<?, ?>)value).entrySet()
						) {
							this.resolveObject(entry.getKey());
							this.resolveObject(entry.getValue());
						}
					}
				} catch (final @NotNull IllegalAccessException ignored) {
				}
			}

			clazz = clazz.getSuperclass();
		}
	}
}
