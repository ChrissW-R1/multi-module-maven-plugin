package me.chrisswr1.multimodulemavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import proguard.annotation.Keep;
import proguard.annotation.KeepName;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Mojo(
	name = "list-modules",
	defaultPhase = LifecyclePhase.INITIALIZE,
	threadSafe = true
)
@Keep
public class ListModulesMojo
	extends AbstractMojo {
	@Parameter(
		defaultValue = "${session}",
		readonly = true
	)
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	@KeepName
	private @Nullable MavenSession session;
	@Parameter(
		defaultValue = "${project.build.directory}/modules-list.txt"
	)
	@Getter
	@KeepName
	private @Nullable File         file;

	@Override
	public void execute()
	throws MojoExecutionException {
		final @Nullable MavenSession session = this.getSession();
		if (session == null) {
			throw new MojoExecutionException(
				"Couldn't determine Maven session!"
			);
		}
		final @Nullable MavenProject topProject = session.getTopLevelProject();
		if (topProject == null) {
			throw new MojoExecutionException(
				"Couldn't determine top level project!"
			);
		}
		final @Nullable File file = this.getFile();
		if (file == null) {
			throw new IllegalArgumentException("File cannot be null!");
		}

		final @NotNull File directory = file.getParentFile();
		if (directory != null && (!(directory.exists()))) {
			if (!(directory.mkdirs())) {
				throw new MojoExecutionException(
					"Cannot create directory of output POM: " +
					directory.getAbsolutePath()
				);
			}
		}
		try {
			if ((!(file.exists())) && (!(file.createNewFile()))) {
				throw new IOException(
					"Output file could not be created: " +
					file.getAbsolutePath()
				);
			}
		} catch (final @NotNull IOException e) {
			throw new MojoExecutionException(
				"Output file could not be created: " + file.getAbsolutePath(),
				e
			);
		}

		final @NotNull List<MavenProject> projects = new ArrayList<>(
			session.getProjects()
		);
		final @NotNull List<String> projectNames = projects.stream().map(
			MavenProject::getName
		).collect(Collectors.toList());
		try {
			Files.write(file.toPath(), projectNames);
		} catch (final @NotNull IOException e) {
			throw new MojoExecutionException(
				"Couldn't write project files to output file!",
				e
			);
		}
	}
}
